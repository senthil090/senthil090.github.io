{"data":{"site":{"siteMetadata":{"title":"Senthilkumar S","author":"Senthilkumar Subramanian"}},"markdownRemark":{"id":"99ba0a41-7c1d-54d0-af76-57df4901797c","excerpt":"What is puppeteer? Puppeteer is a cool node library which used to do some browser related operations programmatically. puppeteer runs chromium inside it…","html":"<h3>What is puppeteer?</h3>\n<p>Puppeteer is a cool node library which used to do some browser related operations programmatically. puppeteer runs chromium inside it.</p>\n<h3>Headless Chromium?</h3>\n<p>Headless is simply a chromium without user interface. In other words, browser build for machines not humans . Headless can be embed to code and use programmatically.</p>\n<p>Though puppeteer uses headless chromium by default. We can customize puppeteer to use non headless or specific chrome or chromium builds.</p>\n<h3>These works can be done by puppeteer?</h3>\n<ul>\n<li>\n<p>Taking screenshots of web pages.</p>\n</li>\n<li>\n<p>Generating PDFs from web pages.</p>\n</li>\n<li>\n<p>Scrap data from site. Can crawl single page applications too.\n<span style=\"font-size: 12px\"> ( In Beautifulsoup its almost impossible to scrap SPAs. )</span></p>\n</li>\n<li>\n<p>Automate web related taks.</p>\n</li>\n</ul>\n<h3>Let’s get started.</h3>\n<p>We shall create node js program which will take screenshots of the site with different device sizes.</p>\n<h3>Prerequisites:</h3>\n<p>Node js installed in your computer. Better if its latest version.</p>\n<p>A new folder to hold this code.</p>\n<h3>Setup</h3>\n<ul>\n<li>\n<p>Open the newly created folder in terminal or command prompt</p>\n</li>\n<li>\n<p>run command npm init to create package.json which is used to maintain the dependencies of the project.</p>\n</li>\n<li>\n<p>run command npm install puppeteer —save to add puppeteer latest published version to your project.the puppeteer will automatically download a chromium version as its need.</p>\n</li>\n<li>\n<p>Now create a main js file. i named it index.js</p>\n</li>\n</ul>\n<h3>Code</h3>\n<p>import puppeteer into code\n<code class=\"language-text\">const  puppeteer  =  require(&#39;puppeteer&#39;);</code></p>\n<p>I have created the function called <code class=\"language-text\">takescreenshot</code> which accepts two command line arguments . one is url of the web page another is a file path to save screenshots.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const  takescreenshot  =  async (url , path) =&gt; { \n}\n\ntakescreenshot( process.argv[2] , process.argv[3] );</code></pre></div>\n<blockquote>\n<p>This method must be prefixed the async operator since it holds lot of promises using await</p>\n</blockquote>\n<p>Initially we need to create the browser instance . we can create many browser instances as much as our system memory allows to create :p</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Launching a new browser instance\n\nconst  browser  =  await  puppeteer.launch();</code></pre></div>\n<p>After browser launches ,  we shall create a page which is the equivalent of tab in our usable browsers.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Opening a new page . simply like new tab\n\nconst  tab  =  await  browser.newPage();</code></pre></div>","frontmatter":{"title":"Getting Started with Puppeteer - 1","author":"Senthilkumar S","date":"July 07, 2019"}}},"pageContext":{"slug":"/getting-started-with-puppeteer-1/","previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World"}},"next":null}}